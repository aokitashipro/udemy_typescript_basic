typescript

// タイプスクリプトでインストール
npx create-react-app react-typescript-weather-app --template typescript

不要ファイルを削除
App.test.tsx
index.css
logo.svg
reportWebVitals.ts
setupTest.ts

react-app-env.d.ts は環境ファイル

const [city, setCity ] = useState<string>('')

で { setCity(100)} とするとエラー発生

weatherAPI
webmocha2@gmail.com
a85sta3e

"@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    

## react
チートシート
https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/basic_type_example

keyboardEvent
https://reactjs.org/docs/events.html#keyboard-events


プロを目指す人のためのtypescript入門
https://note.yuuniworks.com/books/typescript-beginning.html#%E9%96%A2%E6%95%B0%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9

deep dive
https://typescript-jp.gitbook.io/deep-dive/future-javascript/for...of

typescriptの関数を振り返る
https://qiita.com/poch/items/c92cba15be3f6a1b29a6#typescript%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bthis%E3%81%AE%E5%9E%8B%E4%BB%98%E3%81%91


## 公式ドキュメント

SFC<script setup>TypeScript のみの機能
https://v3.ja.vuejs.org/api/sfc-script-setup.html#typescript-のみの機能

Using Vue with TypeScript(環境構築系)
https://vuejs.org/guide/typescript/overview.html#using-vue-with-typescript

TypeScript with Composition API
https://vuejs.org/guide/typescript/composition-api.html

scriptは両立できる
https://reffect.co.jp/vue/vue3-composition#TypeScript
export default使う場合は 両立が必要のよう

script lang="ts"
と
script setup lang="ts"
はそれぞれ


型定義ファイル( .d.ts)
ライブラリごとに必要
ライブラリによっては存在する場合もある

npm in stall {ライブラリ名} ある場合
//別インストール
	npm install @types/{ライブラリ名} --save-dev
	
ないならanyか自分でつくるか

案件で扱うライブラリはたいてい存在しているので

## vue3 

typescript使うならdefineComponentが必須
export default defineComponent({

shims-vue.d.tsファイルはIDEやエディターに拡張子.vueファイルが何のファイルかというのを理解させるために利用するファイルです。
Visual Studio Codeを利用している場合にshims-vue.d.tsファイルが存在しな場合は下記のようにエラーメッセージが表示されます。


Event
細かいことはおいておいて TypeScript で Event の扱いはややこしいのでとにかく使い方

instanceof で Type Guard
const handleInput = (e: Event) => {
  if (e.target instanceof HTMLInputElement) {
    emit("change", e.target?.value);
  }
};
as でキャスト
const handleInput = (event: Event) => {
  emit("change", (event.target as HTMLInputElement).value);
};